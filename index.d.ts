/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** The type of event that occurred */
export const enum EventType {
  MediaChange = 0,
  PlaybackChange = 1,
  VolumeChange = 2,
  MuteChange = 3,
}
/** The data for an event */
export interface EventData {
  eventType: EventType;
  mediaInfo?: MediaInfo;
  volume?: number;
  muted?: boolean;
}
/** The data for a subscription */
export interface Subscription {
  stop: () => void;
}
/** Subscribes to events */
export declare function subscribeToEvents(
  callback: (arg: EventData) => any,
  stopCallback: () => void
): Subscription;
/** Custom error codes that can be thrown */
export const enum ErrorStatus {
  CantDoSomething = 'ERR_STATUS_CANTDSMTGH',
  InvalidCondition = 'ERR_STATUS_INVALID',
}
export interface CustomError {
  message: string;
  status: ErrorStatus;
}
/** Test function that always throws a custom error */
export declare function customError(value: boolean): boolean | CustomError;
/** Information about the currently playing media */
export interface MediaInfo {
  /** The title of the media */
  title?: string;
  /** The artist performing the media */
  artist?: string;
  /** The album containing the media */
  album?: string;
  /** The artist of the album */
  albumArtist?: string;
  /** The current playback status (playing, paused, etc) */
  playbackStatus: string;
  /** Whether the media has an associated thumbnail image */
  hasThumbnail: boolean;
}
/** Gets information about the currently playing media */
export declare function getMediaInfo(): MediaInfo | null;
/** Gets the thumbnail image for the currently playing media as a byte array */
export declare function getThumbnail(): Array<number> | null;
/**
 * Attempts to play the current media
 * @returns Whether the play command was successful
 */
export declare function play(): Promise<boolean>;
/**
 * Attempts to pause the current media
 * @returns Whether the pause command was successful
 */
export declare function pause(): Promise<boolean>;
/**
 * Attempts to skip to the next track
 * @returns Whether the next command was successful
 */
export declare function next(): Promise<boolean>;
/**
 * Attempts to go back to the previous track
 * @returns Whether the previous command was successful
 */
export declare function previous(): Promise<boolean>;
/**
 * Attempts to stop playback of the current media
 * @returns Whether the stop command was successful
 */
export declare function stop(): Promise<boolean>;
/**
 * Sets the system volume level
 * @param level - Volume level between 0.0 and 1.0
 * @returns Whether setting the volume was successful
 */
export declare function setSystemVolume(level: number): Promise<boolean>;
/**
 * Gets the current system volume level
 * @returns Volume level between 0.0 and 1.0, or null if unable to get volume
 */
export declare function getSystemVolume(): Promise<number | null>;
/**
 * Sets the system mute state
 * @param mute - Whether to mute (true) or unmute (false) the system audio
 * @returns Whether setting the mute state was successful
 */
export declare function setSystemMute(mute: boolean): Promise<boolean>;
/**
 * Gets the current system mute state
 * @returns Whether the system is muted (true) or not (false), or null if unable to get state
 */
export declare function getSystemMute(): Promise<boolean | null>;
